# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - "server/**"
# env:
#   REGISTRY: "registry.digitalocean.com/somesandwich-fishtank"
#   IMAGE_NAME: "myshop-intro-window-backend"

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout branch
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: 14

#       - name: Install dependencies
#         run: npm i

#       - name: Build Docker image
#         run: docker build -t nguyenhau2506/e-tax:tagname ${{ github.sha }} ./server/.
#         # run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) ./server/.
#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

#       - name: Push Docker image
#         run: docker push docker.io/nguyenhau2506/e-tax:${{ g

#       - name: Deploy to server
#         env:
#           PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
#           HOST: ${{ secrets.SERVER_HOST }}
#           USER: ${{ secrets.SERVER_USER }}
#         run: |
#           echo "$PRIVATE_KEY" > private_key.pem
#           chmod 600 private_key.pem
#           scp -i private_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docker-compose.yml $USER@$HOST:/path/to/your/project
#           scp -i private_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null .env $USER@$HOST:/path/to/your/project
#           ssh -i private_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST "cd /path/to/your/project && docker-compose pull && docker-compose up -d"
#           rm -f private_key.pem

# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - "server/**"
# env:
#   REGISTRY: "registry.digitalocean.com/somesandwich-fishtank"
#   IMAGE_NAME: "nguyenhau2506/e-tax"

# jobs:
#   build_and_push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout branch
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: 14

#       - name: Install dependencies
#         run: npm i

#       - name: Build Docker image
#         run: docker build -t nguyenhau2506/e-tax:${{ github.sha }} ./server/.

#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

#       - name: Push Docker image
#         run: docker push docker.io/nguyenhau2506/e-tax:${{ github.sha }}

#       # - name: Deploy to server
#       #   run: |
#       #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "docker pull docker.io/nguyenhau2506/e-tax:${{ github.sha }}"
#       #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "docker stop my-container || true"
#       #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "docker rm my-container || true"
#       #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "docker run -d --name my-container -p 8080:80 docker.io/nguyenhau2506/e-tax:${{ github.sha }}"
     
#   deploy:
#     runs-on: ubuntu-latest
#     needs: build_and_push
#      steps:
#       - name: Deploy to DigitalOcean Droplet
#         uses: appleboy/ssh-action@master
#         with:
#           script_stop: true
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SERVER_PRIVATE_KEY }}
         
#           envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
#           script: |
#             # Login to registry
#             docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
#             # Stop container if is running and remove old container
#             docker stop $(echo $IMAGE_NAME) || true && docker rm $(echo $IMAGE_NAME) || true
#             # Remove old container
#             # docker rm $(echo $IMAGE_NAME)
#             # Run a new container from a new image
#             docker run -d \
#             --restart always \
#             --name $(echo $IMAGE_NAME) \
#             -e DB_CONNECTIONSTR="${{ secrets.DB_CONNECTIONSTR }}" \
#             -p 7772:80 \
#             -p 7773:443 \
#             $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)


# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - develop
#     paths:
#       - ".github/workflows/CICD.yml"
#       - "server/**"

# env:
#   IMAGE_NAME: "nguyenhau2506/e-tax"

# jobs:
#   build_and_push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout branch
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: 14

#       - name: Install dependencies
#         run: npm i

#       - name: Build Docker image
#         run: docker build -t nguyenhau2506/e-tax:${{ github.sha }} ./server/.

#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

#       - name: Push Docker image
#         run: docker push docker.io/nguyenhau2506/e-tax:${{ github.sha }}

#   deploy:
#     needs: build_and_push
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy to DigitalOcean Droplet
#         uses: appleboy/ssh-action@master
#         with:
#           script_stop: true
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SERVER_PRIVATE_KEY }}
#           envs: IMAGE_NAME
#           script: |
#             # Login to registry
#             docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
#             # Stop and remove the old container if it exists
#             docker stop $(echo $IMAGE_NAME | tr ':/' '-') || true && docker rm -f $(echo $IMAGE_NAME | tr ':/' '-') || true
#             # Run a new container from the new image without the DB_CONNECTIONSTR environment variable
#             docker run -d \
#             --restart always \
#             --name $(echo $IMAGE_NAME | tr ':/' '-') \
#             -p 7772:3000 \
#             -p 7773:443 \
#             nguyenhau2506/e-tax:${{ github.sha }} \
#             # Remove if error
#             # Copy the .env file to the container
#             docker exec $(echo $IMAGE_NAME | tr ':/' '-') /bin/sh -c 'echo -e "${{ secrets.ENV_FILE }}" > .env'
#             # Restart the container
#             docker restart $(echo $IMAGE_NAME | tr ':/' '-')
        






